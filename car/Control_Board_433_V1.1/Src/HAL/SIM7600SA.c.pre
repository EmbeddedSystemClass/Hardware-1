#include "main.h"
#include "BSP.h"
#include "LTE_BSP.h"
#include "stm32f4xx_hal.h"
#include "systick_timer.h"
#include "LED_BSP.h"
#include <string.h>
#include "AT_CMD.h"
#include "GPS_analysis.h"
#include "SIM7600SA.h"
#include "CRC.h"
#include "UART_Process.h"
#include "RF_Process.h"
#include "LTE_analysis.h"
#include "m25p64.h"

Module_Sample_Time  lte_time_tmp;


device_com_down dev_info_down;   //server down setting parameters to dev
device_com_up device_info_up; //dev upload parameters to server

unsigned char Init_step;
unsigned char connnection_step; //lte connection step
unsigned char RF_TX_BUFF[buffer_size2];//lte 数据发送缓冲区
unsigned char RF_RX_BUFF[buffer_size2];//let数据接收缓冲器
unsigned char UART_TX_BUFF[buffer_size2];//lte 数据发送缓冲区
unsigned char UART_RX_BUFF[buffer_size2];//let数据接收缓冲器

unsigned char LTE_TX_BUFF[buffer_size];//lte 数据发送缓冲区
unsigned char LTE_RX_BUFF[buffer_size];//let数据接收缓冲器
unsigned int no_Network_Intensity=0;//没信号标志位

unsigned char       LTE_Rev_Flag;  //lte uart receive date flag
unsigned char       RF_Rev_Flag;   //rf uart receive date flag
unsigned char       Uart_Rev_Flag;  //other uart receive date flag
unsigned int        Battery_Voltage;  //battery voltage,times 100
unsigned char payload_status;//
unsigned char reconfig_flag;
extern Uart_Types_2 UsartType2;
extern Uart_Types_2 UsartType3;
extern Uart_Types UsartType5;
GPS_INFO        GPS;
RF_INFO_DEF      RF_INFO;
UART_INFO_DEF    UART_INFO;

/************************************************************
Function:  init LTE Module
Name:      LTE_M_init()
Parameter: no
************************************************************/
void LTE_M_init()
{

HAL_GPIO_WritePin(GPIOB, RF_433_EN_Pin, GPIO_PIN_RESET);

LTE_hw_init();
LTE_power_on();
LET_gps_power_ctrl(ON);
LET_power_ctrl();
LET_reset();
}
//找出temp在target的位置
int FindIndex(char *target,char temp)
{
int i= 0;
if(target ==NULL)
{
    //  printf("搜索词为空...");
    return 0;
}
for(i = strlen(target) -1; i>=0; i--)
{
    if(target[i] == temp)
    {
        return i;
    }
}
return -1;  //未找到字符匹配位置

}
/************************************************************
Function:  string match or not that return froom LTE module
Name:      AT_cmd_ack(unsigned char *src,unsigned char *dest)
Parameter: 1:string match, 0: string not match
************************************************************/
unsigned char AT_cmd_ack(unsigned char *src,unsigned char *dest)
{
int i= 0,j = 0;
int srclen = strlen((const char *)src);
int tarlen=strlen((const char *)dest);
int temp  =0;
int index = -1;
if(src ==NULL || dest ==NULL)
{
    return 0;
}

while(i<srclen)
{
    //循环条件
    if(src[i] == dest[j])
    {
        if(j==tarlen-1)
        {
            // printf("匹配成功...");
            return 1;
        }
        i++;
        j++;
    }
    else
    {
        //发现不相等位置
        temp = tarlen - j + i;  //字符串后面的第一个字符位置
        index = FindIndex((char *)dest,src[temp]);
        if(index==-1)
        {
            //未找到位置，后移
            i = temp+1;
            j = 0;
        }
        else
        {
            //找到位置
            i = temp-index;
            j = 0;
        }
    }
}
//  printf("匹配失败..");
return 0;
}


unsigned char at_cmd_ok(unsigned char *src)
{
if(AT_cmd_ack(src,(unsigned char *)Respond_OK)==1)//reset
{
    return 1;
}
return 0;

}
/************************************************************
Function:  LTE module connection step status
Name:      LTE_connection_state(unsigned char *src)
Parameter: no
************************************************************/
void LTE_connection_state(unsigned char *src)
{
if(connnection_step==0)
{
    switch(Init_step)
    {

        case 1:
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_Start))//reset
            {
                Init_step++;
            }
            else
                ;//connnection_step=0;
        }
        break;
        case 2:
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_OK)==1)//ATE0
            {
                Init_step++;
            }
            else
                ;//connnection_step=0;
        }
        break;
        case 3:
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_OK)==1)//normal mode
            {
                Init_step++;
            }
        }
        break;
        case 4:
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_CPIN)==1)//check sim card
            {
                Init_step++;
            }

        }
        break;
        case 5://
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_Network_Intensity)==1)//||AT_cmd_ack(src,(unsigned char *)Respond_Network_Intensity2)==1)//read network intensity
            {
                ;//Init_step++;
            }
            else
                Init_step++;
        }
        break;
        case 6://查询GPRS是否注册
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_OK)==1)
            {
                Init_step++;

            }
        }
        break;

    }
}
else
{
    switch(connnection_step)
    {
        case 1://://start gps
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_OK)==1)
            {
                connnection_step++;
            }
            //else
            //connnection_step--;
        }
        break;
        case 2://://transparent
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_OK)==1)
            {
                connnection_step++;
            }
            //else
            //connnection_step--;
        }
        break;
        case 3://://net open
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_Network_Open2)==1||AT_cmd_ack(src,(unsigned char *)Respond_OK)==1||AT_cmd_ack(src,(unsigned char *)Respond_Network_Open)==1)
            {
                connnection_step++;
            }
            //else
            //connnection_step--;
        }
        break;
        case 4://://tcp estalblish
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_OK)==1||AT_cmd_ack(src,(unsigned char *)Respond_TCP_Connect)==1)
            {
                connnection_step++;
            }
            else
                ;//connnection_step--;
        }
        break;

        case 5://://tcp estalblish
        {
            if(AT_cmd_ack(src,(unsigned char *)Respond_ERROR)==1||AT_cmd_ack(src,(unsigned char *)Respond_Connection_ERROR)==1)
            {
                connnection_step--;
            }
            else
                ;
        }
        break;
    }
}
if(connnection_step<MAX_STEP&&connnection_step>0)
{
    no_Network_Intensity++;
}
else
    no_Network_Intensity=0;
if(no_Network_Intensity>=Max_Network_thres)
{
    connnection_step=0;
    Init_step=0;
    reconfig_flag=1;
}

}
uint32_t i;
unsigned char quit_transparent_flag;
void Get_GPS_info()
{

if(quit_transparent_flag==0||quit_transparent_flag==3)
{
    Send_Comm((unsigned char*)Quit_transparent,strlen((const char*)Quit_transparent));
    quit_transparent_flag=1;
    //delay_ms(400);

}

if(quit_transparent_flag==2)
{
    Reset_Sample_flag(0);
    quit_transparent_flag=0;
    Send_Comm((unsigned char*)AT_GPS_info,strlen((const char*)AT_GPS_info));

}

//  while(AT_cmd_ack(&UsartType5.usartDMA_rxBuf[UsartType5.real_index],(unsigned char *)Respond_OK)==0)
//  {
//      i++;
//      if(i>100000)
//      {
//          i=0;
//          goto begin;
//      }
//  }


//Send_Comm((unsigned char*)Enter_transparent_mode,strlen((const char*)Enter_transparent_mode));

}
void Return_transparent()
{
if(connnection_step>=MAX_STEP)
    Send_Comm((unsigned char*)Enter_transparent_mode,strlen((const char*)Enter_transparent_mode));
}

//#define debug_mode2
/************************************************************
Function:  AT command sent
Name:      void LTE_connection_ctrl()
Parameter: no
************************************************************/
void LTE_connection_ctrl()
{

#ifdef debug_mode2//debug调试用

//   Send_Comm((unsigned char*)M_RESET,strlen((const char*)M_RESET));

//   Send_Comm((unsigned char*)Echo_Dis,strlen((const char*)Echo_Dis));
//Send_Comm((unsigned char*)Mnimum_Mode,strlen((const char*)Mnimum_Mode));

Send_Comm((unsigned char*)Normal_Mode,strlen((const char*)Normal_Mode));

Send_Comm((unsigned char*)Check_SIM,strlen((const char*)Check_SIM));

Send_Comm((unsigned char*)Network_Intensity,strlen((const char*)Network_Intensity));

Send_Comm((unsigned char*)GPRS_Register,strlen((const char*)GPRS_Register));

Send_Comm((unsigned char*)Start_GPS,strlen((const char*)Start_GPS));

Send_Comm((unsigned char*)Pass_Through,strlen((const char*)Pass_Through));

Send_Comm((unsigned char*)Net_Open,strlen((const char*)Net_Open));

Send_Comm((unsigned char*)Establish_TCP_Connection,strlen((const char*)Establish_TCP_Connection));


#else


if(connnection_step==0)
{
    switch(Init_step)
    {
        case 0:
        {
            ;
            //Send_Comm((unsigned char*)M_RESET,strlen((const char*)M_RESET));
            //  delay_ms(30000);
            // Send_Comm((unsigned char*)Normal_Mode,strlen((const char*)Test));
        }
        break;
        case 2:
        {
            Send_Comm((unsigned char*)Echo_Dis,strlen((const char*)Echo_Dis));
        }
        break;
        case 3:
        {
            Send_Comm((unsigned char*)Normal_Mode,strlen((const char*)Normal_Mode));
        }
        break;
        case 4:
        {
            Send_Comm((unsigned char*)Check_SIM,strlen((const char*)Check_SIM));
        }
        break;
        case 5:
        {
            Send_Comm((unsigned char*)Network_Intensity,strlen((const char*)Network_Intensity));
        }
        break;
        case 6:
        {
            Send_Comm((unsigned char*)GPRS_Register,strlen((const char*)GPRS_Register));
        }
        break;
        case 7:
        {
            Init_step++;
            connnection_step++;
            goto Net;
        }
    }

}
else
{
Net:
    switch(connnection_step)
    {
        case 1:
        {
            Send_Comm((unsigned char*)Start_GPS,strlen((const char*)Start_GPS));
        }
        break;
        case 2:
        {
            Send_Comm((unsigned char*)Pass_Through,strlen((const char*)Pass_Through));
            //Send_Comm((unsigned char*)Net_Open,strlen((const char*)Net_Open));

        }
        break;
        case 3:
        {
            Send_Comm((unsigned char*)Net_Open,strlen((const char*)Net_Open));
            //Send_Comm((unsigned char*)Establish_TCP_Connection,strlen((const char*)Establish_TCP_Connection));
        }
        break;
        case 4:
        {
            Send_Comm((unsigned char*)Establish_TCP_Connection,strlen((const char*)Establish_TCP_Connection));

        }
        break;
        case 10:
        {
        } break;
        case 11:
        {
        } break;
        case 13:
        {
        } break;
        case 14:
        {
        } break;
        case 15:
        {
        } break;
    }
}
//delay_ms(100);
#endif
}

/************************************************************
Function:  network rssi status
Name:      unsigned int get_Network_Intensity()
Parameter: no_Network_Intensity
************************************************************/
unsigned int get_Network_Intensity()
{
return no_Network_Intensity;
}

/************************************************************
Function:  at command control
Name:      LTE_AT_CMD_sent()
Parameter: no
************************************************************/
//static uint32_t lte_time_tmp;
unsigned char last_step;
void LTE_AT_CMD_sent()
{
/*#define LTE_DELAY_INDEX        0
#define RF_DELAY_INDEX           1
#define GPS_INTERVAL_INDEX       2
#define RF_INTERVAL_INDEX        3 */



lte_time_tmp=Get_Sample_flag_Status();

if(lte_time_tmp.LTE_delay_flag==1)//等待超时
{
    Reset_Sample_flag(LTE_DELAY_INDEX);//复位lte延时定时器
    LTE_connection_ctrl();//lte逻辑控制
//      last_step=connnection_step;
    noblock_delay_ms(LTE_DELAY_INDEX,5000); //非阻塞延时
}

}


void LTE_Process(void)
{
LTE_AT_CMD_sent();
}
void payload_status_setting(unsigned char logic_types,unsigned char flag)
{
/*
payload_status:
0x01:1,gps data
0x02:1,temperature data
0x04:1,uart data
0x08:1,data store into spi flash
0x10:1,heart data
0x80: data ready to be tx
#define GPS_data_flag           0x01
#define Temper_data_flag        0x02
#define UART_data_flag          0x04
#define SPI_Flash_data_flag     0x08
#define Heart_data_flag         0x10
#define TX_data_flag            0x80

*/
if(logic_types==0)
    payload_status=payload_status|flag;
else
    payload_status=payload_status&flag;
}
unsigned get_payload_status()
{
return payload_status;
}
unsigned char get_connection_step()
{
return connnection_step;
}
/************************************************************
Function:  gps data store when no rssi
Name:     device_info_data_store()
Parameter: no
************************************************************/
void device_info_data_store()
{
//   if(get_Network_Intensity()>Max_Network_thres)
{
    //no_Network_Intensity=0;
    Device_data_store(UsartType5.usartDMA_rxBuf,10);
    //payload_status_setting(0,SPI_Flash_data_flag);



}
}


//lte发送数据打包处理
unsigned int lte_tx_len;
unsigned lte_tx_index;

void Data_ConvertTo_Package(unsigned char mode,unsigned int len,unsigned *pbuff)
{
//LTE_TX_BUFF
//  unsigned char i;

if(mode==0)
{
    //gps data
    lte_tx_len=sizeof(GPS);
    memcpy(&LTE_RX_BUFF[4],&GPS,len);
    lte_tx_index=len+4;

    if(get_payload_status()&Temper_data_flag)
    {
        //temperature
        memcpy(&LTE_RX_BUFF[lte_tx_index],UsartType2.usartDMA_rxBuf,UsartType2.rx_len);
        lte_tx_len=lte_tx_len+UsartType2.rx_len;
        //payload length
        lte_tx_index=lte_tx_index+UsartType2.rx_len;
        memcpy(&LTE_RX_BUFF[0],&lte_tx_len,4);

    }
    else

        ;

}
else
{
    //gps data
    lte_tx_len=len;
    memcpy(&LTE_RX_BUFF[4],pbuff,len);
    lte_tx_index=len+4;
}
}





//lte发送数据打包

void LTE_PayLoad_Update(unsigned char index)
{
if(index==0)//data download
{
    //crc decode



    /*设置参数
    0x01: 设置服务器IP地址   ;
    0x02：设置GPS采样频率；
    0x03：设置无线采样频率；
    0x04: 全部更新设置
    查询参数:0x10
    */
    switch(dev_info_down.function_status)
    {
        case 0x01:
        {
            //Establish_TCP_Connection

        } break;
        case 0x02:
        {
            Sample_Time_Interval_Setting(GPS_INTERVAL_INDEX,dev_info_down.gps_time_interval);

        }
        break;
        case 0x03:
        {
            Sample_Time_Interval_Setting(RF_INTERVAL_INDEX,dev_info_down.rf_time_interval);

        }
        break;
        case 0x04:
        {
            //Establish_TCP_Connection
            Sample_Time_Interval_Setting(GPS_INTERVAL_INDEX,dev_info_down.gps_time_interval);
            Sample_Time_Interval_Setting(RF_INTERVAL_INDEX,dev_info_down.rf_time_interval);

        }
        break;
        case 0x10:
        {


        } break;
    }
}



if(index==1) //data upload
{
    if((GPS.len_Hbyte*256+GPS.len_Lbyte)!=0)
    {

        if(get_Network_Intensity()<Max_Network_thres&&connnection_step>MAX_STEP)//gps数据直接发送
        {
            Return_transparent();//返回到服务器
            Data_ConvertTo_Package(0,0,0);
            payload_status_setting(0,GPS_data_flag);//数据准备好待发送
            payload_status_setting(0,TX_data_flag);

        }
        else if(get_Network_Intensity()>Max_Network_thres)//数据falsh缓存
        {

            //Data_ConvertTo_Package();
            device_info_data_store();

            payload_status_setting(0,SPI_Flash_data_flag);

        }


    }

}

if(index==2)//update temperature
{
    //payload_status=payload_status|0x02;
    //Data_ConvertTo_Package();
    payload_status_setting(0,Temper_data_flag);
    //RF_INFO
}
if(index==3)//update others info
{
    // payload_status=payload_status|0x04;
    //Data_ConvertTo_Package();
    payload_status_setting(0,UART_data_flag);
    //UART_INFO

}





}


unsigned char Server_Param(unsigned char *pbuff, device_com_down dev_info)
{

#ifdef debug_mode
char *gps_buff="+CGPSINFO:3113.343286,N,12121.234064,E,250311,072809.3,44.1,0.0,0";
pbuff = gps_buff;
#endif

if(LTE_Parse(pbuff, dev_info))
{
    //  if(CRC_decode(pbuff,CRC_len))
    {
        return 1;
    }

}
return 0;

}
flash_data_def flash_data;
void Flash_data_TxRx_Poll()
{
if(get_payload_status()&TX_data_flag==0)
{
    if(flash_data.len>buffer_size)
    {
        Device_data_read(flash_data.data_buff,flash_data.Raddress,buffer_size);

        Data_ConvertTo_Package(1,buffer_size,&flash_data.data_buff[flash_data.index]);
        flash_data.Raddress=flash_data.Raddress+buffer_size;
        flash_data.index=flash_data.index+buffer_size;
        flash_data.len=flash_data.len-buffer_size;

        payload_status_setting(0,TX_data_flag);
    }
    else if(flash_data.len>0)
    {
        Device_data_read(flash_data.data_buff,flash_data.Raddress,flash_data.len);

        Data_ConvertTo_Package(1,buffer_size,&flash_data.data_buff[flash_data.index]);
        flash_data.Raddress=0;
        flash_data.index=0;
        flash_data.len=0;
        payload_status_setting(1,SPI_Flash_data_flag_mask);
        payload_status_setting(0,TX_data_flag);

    }

}
void TXRX_Poll()
{
//  unsigned int i;
//    unsigned int len_tmp;
//  Module_Sample_Time sample_time;


//********************************************************************************
//*********************************  RX *******************************************

    lte_time_tmp=Get_Sample_flag_Status();
    if(lte_time_tmp.LTE_Power_flag==1&&Init_step==0)//等待开机完成
    {
        RF_Rev_Flag=2;
        Reset_Sample_flag(LTE_Power_INDEX);
        Init_step=1;
        //tx heart

    }

    if(UsartType5.receive_flag==1&&Init_step>0)//lte analysis data
    {


        lte_time_tmp=Get_Sample_flag_Status();

        //if(lte_time_tmp.TXRX_sample_flag==1)//等待超时
        {
            UsartType5.receive_flag=0;
            //Reset_Sample_flag(TXRX_INDEX);


            if(GPS_RMC_Parse(&UsartType5.usartDMA_rxBuf[UsartType5.real_index], &GPS,1))//解析gps数据
            {
                LTE_PayLoad_Update(1);
            }
            else if(Server_Param(&UsartType5.usartDMA_rxBuf[UsartType5.real_index], dev_info_down))//服务器下发指令
            {
                LTE_PayLoad_Update(0);
            }
            else if(quit_transparent_flag==1)//判断是否返回退出透传状态值
            {
                if(at_cmd_ok(&UsartType5.usartDMA_rxBuf[UsartType5.real_index]))
                    quit_transparent_flag=2;
                else
                    quit_transparent_flag=3;//重新发送退出透传
            }
            else
            {
                LTE_connection_state(&UsartType5.usartDMA_rxBuf[UsartType5.real_index]);  //LTE返回值解析
            }

        }


    }
    else
    {
        if(get_payload_status()&SPI_Flash_data_flag)//发送flash中存储的设备数据
        {
            if(flash_data.len==0)
            {
                if(M25PXX_Read_len(&flash_data.len)==1)
                {
                    Flash_data_TxRx_Poll();

                }

            }
            else
            {
                if(get_payload_status()&TX_data_flag==0)
                {

                    Flash_data_TxRx_Poll();
                }

            }
        }
    }

    if(RF_Rev_Flag==2&&UsartType5.receive_flag==0)//lte 状态逻辑控制以及周期性获取gps位置信息
    {
        Sample_Timer_Reload();//reload timer
        LTE_Process();//lte 状态逻辑控制

        lte_time_tmp=Get_Sample_flag_Status();


        if(connnection_step>=MAX_STEP)//tx lte heart data
        {
            if(lte_time_tmp.LTE_heart_flag==1)
            {
                Reset_Sample_flag(4);
                //tx heart
            }
        }

        if(lte_time_tmp.GPS_sample_flag==1)//等待超时
        {

            // gps位置获取条件：无信号，或者链接到服务器
            if((connnection_step>=MAX_STEP)||no_Network_Intensity>Max_Network_thres)
            {
                Get_GPS_info();
            }

        }
    }




    if(UsartType2.receive_flag==1)//RF
    {
        UsartType2.receive_flag=0;
        if(RF_Param(UsartType2.usartDMA_rxBuf, RF_INFO))
        {
            LTE_PayLoad_Update(2);
        }

    }

    if(UsartType3.receive_flag==1)//Others
    {
        UsartType3.receive_flag=0;

        if(Uart_Param(UsartType3.usartDMA_rxBuf, UART_INFO))
        {
            LTE_PayLoad_Update(3);
        }

    }
    /**************************************************************************************************************
    **************************************************************************************************************/
}

}
//*********************************  TX *******************************************



void LTE_TX_Data()
{
if(get_payload_status()&TX_data_flag)
{
//LTE_TX_BUFF tx
	payload_status_setting(1, TX_data_flag_mask);
}
if(get_payload_status()&Heart_data_flag)
{
//LTE_TX_BUFF tx
	 payload_status_setting(1, Heart_data_flag_mask);
}

}

void Reconfig_LTE()
{
if(reconfig_flag==1)
{
    reconfig_flag=0;
    uart_init();
    LTE_M_init();
    Sample_Timer_Init();//reloader timer counter
}

}
void Modue_Run_Process(void)
{
Reconfig_LTE();

Sample_Timer_Reload();
TXRX_Poll();

}

void lte_test()
{
Send_Comm((unsigned char*)M_RESET,strlen((const char*)M_RESET));;
}





