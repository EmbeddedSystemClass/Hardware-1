#include "main.h"
#include "systick_timer.h"
#include "stm32f4xx_hal.h"


//采样、延时时间设置,
/*    0:LTE运行延时
        1:433MHZ延时时间
        2:GPS采样频率
        3:433MHZ采样频率
        4:其他
*/

uint32_t Time_delay[systick_count];//采样、延时时间设置

unsigned char  GPS_Time_Interval=5; //gps采样频率设置
unsigned char  RF_Time_Interval =5; // 433MHz 采样频率设置
unsigned char LTE_Delay_Time =5;
unsigned char RF_Delay_Time =5;
Module_Sample_Time sample_time_flag;

uint32_t TimingDelay;
//系统延时函数，单位：ms
void delay_us(uint32_t nus)
{
	uint32_t us;
	us = nus;
	while(us != 0)
		us--;
}
//系统延时函数，单位：ms
void delay_ms(uint32_t nms)
{

	TimingDelay = nms;
	while(TimingDelay != 0);
}
//系统定时函数，非阻塞，单位：ms

void noblock_delay_ms(unsigned char index,uint32_t nms)
{
	Time_delay[index]=nms;
}
uint32_t get_Time_delay(unsigned char index)
{
	return Time_delay[index];
}


uint32_t Time_delay[systick_count];
/*
各模块定时器延时
*/
void Sample_timer_dec()
{
	unsigned char i;
	for(i=0; i<systick_count; i++)
	{
		if(Time_delay[i]>0)
			Time_delay[i]=Time_delay[i]-1;
	}

}



unsigned char  Sample_Time_Interval_Cmp(uint32_t src,uint32_t dst,unsigned char index)
{
	if(src!=dst)
	{
	    //EEPROM_Store(dst,index);
		return 1;
	}
		return 0;

}
//设置采样频率、延时时间
void Sample_Time_Interval_Setting(unsigned char index,uint32_t value)
{




	switch(index)
	{
		case LTE_DELAY_INDEX:
		{
		   if(Sample_Time_Interval_Cmp(LTE_Delay_Time,value,index))
			LTE_Delay_Time=value;

		} break;

		case RF_DELAY_INDEX:
		{
		if(Sample_Time_Interval_Cmp(RF_Delay_Time,value,index))
			RF_Delay_Time=value;

		} break;

		case GPS_INTERVAL_INDEX:
		{
		if(Sample_Time_Interval_Cmp(GPS_Time_Interval,value,index))
			GPS_Time_Interval=value;

		} break;

		case RF_INTERVAL_INDEX:
		{
		if(Sample_Time_Interval_Cmp(RF_Time_Interval,value,index))
			RF_Time_Interval=value;

		} break;

		case 4:
		{
		//if(Sample_Time_Interval_Cmp(LTE_Delay_Time,value,index))
			//LTE_Delay_Time=value;

		} break;

	}
	//保存参数到flash中，掉电保存
	
      
}
void Get_Sample_flag_Status(Module_Sample_Time pbuffer)
{
	pbuffer=sample_time_flag;
}



//各模块定时器重新计时加载
void Sample_Timer_Reload()
{
    uint32_t *pbuffer;
	unsigned char i;
//	uint32_t value;
	for(i=0;i<systick_count;i++)
	{
		if(Time_delay[i]==0)
		{
		       switch(i)
		       	{
				case 0:
				{
					pbuffer[i] = LTE_Delay_Time;
				}break;

				 case 1:
				 {
					 pbuffer[i] = RF_Delay_Time;
					 
				 }break;
				 case 2:
				 {
					 pbuffer[i] = GPS_Time_Interval;
					 sample_time_flag.GPS_sample_flag=1;
				 }break;

				 case 3:
				 {
					 pbuffer[i] = RF_Time_Interval;
					 sample_time_flag.RF_sample_flag=1;
				 }break;

				 case 4:
				 {
					 pbuffer[i] = LTE_Delay_Time;
					 sample_time_flag.LTE_heart_flag=1;
				 }break;
			
			 }
			//Sample_Time_Interval_Setting(i,value);
		}
	}
	
}

void HAL_SYSTICK_Callback(void)
{

	if (TimingDelay != 0x00000000)
	{
		TimingDelay--;
	}

					 pbuffer[i] = LTE_Delay_Time;
					 sample_time_flag.LTE_heart_flag=1;
				 }break;
			
			 }
			//Sample_Time_Interval_Setting(i,value);
		}
	}
	
}

void HAL_SYSTICK_Callback(void)
{

	if (TimingDelay != 0x00000000)
	{
		TimingDelay--;
	}

		Sample_timer_dec();


}
