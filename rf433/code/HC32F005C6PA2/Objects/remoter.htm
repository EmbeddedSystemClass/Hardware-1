<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\remoter.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\remoter.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jul 30 13:43:21 2019
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; command_process &rArr; command_key_anlyz &rArr; CommandTx &rArr; loop_Tx &rArr; bSendMessage &rArr; vSetTxPayloadLength &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[13]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SysTick_Handler</a><BR>
 <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[2a]">CLKTRIM_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[18]">Dummy_Handler</a> from startup_hc32f005.o(.text) referenced 10 times from startup_hc32f005.o(RESET)
 <LI><a href="#[29]">EF_RAM_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[2e]">ErrIntCallback</a> from bsp_uart.o(i.ErrIntCallback) referenced from bsp_uart.o(i.UART_Config)
 <LI><a href="#[2f]">FlashInt</a> from eeprom.o(i.FlashInt) referenced from eeprom.o(i.eeprom_write)
 <LI><a href="#[10]">HardFault_Handler</a> from interrupts_hc32f005.o(i.HardFault_Handler) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[1c]">I2C_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[28]">LVD_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[23]">PCA_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[14]">PORT0_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[15]">PORT1_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[16]">PORT2_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[17]">PORT3_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[2d]">RxIntCallback</a> from bsp_uart.o(i.RxIntCallback) referenced from bsp_uart.o(i.UART_Config)
 <LI><a href="#[1b]">SPI_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_hc32f005.o(i.SystemInit) referenced from startup_hc32f005.o(.text)
 <LI><a href="#[1d]">TIM0_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[1e]">TIM1_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[1f]">TIM2_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[20]">TIM4_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[21]">TIM5_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[22]">TIM6_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[19]">UART0_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[1a]">UART1_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[26]">VC0_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[27]">VC1_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[24]">WDT_IRQHandler</a> from startup_hc32f005.o(.text) referenced from startup_hc32f005.o(RESET)
 <LI><a href="#[30]">__main</a> from __main.o(!!!main) referenced from startup_hc32f005.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[33]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[39]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[34]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[32]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[36]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[38]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; command_process &rArr; command_key_anlyz &rArr; CommandTx &rArr; loop_Tx &rArr; bSendMessage &rArr; vSetTxPayloadLength &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[50]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CLKTRIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Dummy_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EF_RAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PCA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PORT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PORT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PORT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PORT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>VC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>VC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f005.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32f005.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e7]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ack_response
</UL>

<P><STRONG><a name="[44]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ack_response
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfPrase
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ack_response
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrase
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anlyz_uart_data
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>

<P><STRONG><a name="[e8]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetBaudRate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrase
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ef]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[48]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[35]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[4a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[49]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[37]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4c]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[4b]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[51]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[f3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>Bt_ARRSet</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bt.o(i.Bt_ARRSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[7c]"></a>Bt_Cnt16Set</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bt.o(i.Bt_Cnt16Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_Cnt16Set
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[7a]"></a>Bt_Init</STRONG> (Thumb, 478 bytes, Stack size 12 bytes, bt.o(i.Bt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[7d]"></a>Bt_Run</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, bt.o(i.Bt_Run))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[53]"></a>CMT2300_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.CMT2300_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CMT2300_Init &rArr; vInit &rArr; bIntSrcFlagClr &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnablePLLcheck
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCfgBank
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
</UL>

<P><STRONG><a name="[60]"></a>CRC16_Get8</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, crc.o(i.CRC16_Get8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC16_Get8
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfPrase
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ack_response
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrase
</UL>

<P><STRONG><a name="[59]"></a>Clk_GetHClkFreq</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, clk.o(i.Clk_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Clk_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_GetPClkFreq
</UL>

<P><STRONG><a name="[58]"></a>Clk_GetPClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, clk.o(i.Clk_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Clk_GetPClkFreq &rArr; Clk_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[5a]"></a>Clk_SetFunc</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, clk.o(i.Clk_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Clk_SetFunc &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkWriteDummy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUnlock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_intterupt_config
</UL>

<P><STRONG><a name="[78]"></a>Clk_SetPeripheralGate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clk.o(i.Clk_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clk_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[5e]"></a>CommandTx</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, command.o(i.CommandTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CommandTx &rArr; loop_Tx &rArr; bSendMessage &rArr; vSetTxPayloadLength &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Get8
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Tx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_params_get
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_key_anlyz
</UL>

<P><STRONG><a name="[65]"></a>EnableNvic</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, interrupts_hc32f005.o(i.EnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_intterupt_config
</UL>

<P><STRONG><a name="[2e]"></a>ErrIntCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_uart.o(i.ErrIntCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ErrIntCallback &rArr; Uart_ClrStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(i.UART_Config)
</UL>
<P><STRONG><a name="[2f]"></a>FlashInt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eeprom.o(i.FlashInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashInt &rArr; Flash_DisableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetIntFlag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DisableIrq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(i.eeprom_write)
</UL>
<P><STRONG><a name="[69]"></a>Flash_ClearIntFlag</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, flash.o(i.Flash_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInt
</UL>

<P><STRONG><a name="[6a]"></a>Flash_DisableIrq</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, flash.o(i.Flash_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInt
</UL>

<P><STRONG><a name="[68]"></a>Flash_GetIntFlag</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, flash.o(i.Flash_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInt
</UL>

<P><STRONG><a name="[b2]"></a>Flash_Init</STRONG> (Thumb, 548 bytes, Stack size 8 bytes, flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>

<P><STRONG><a name="[b3]"></a>Flash_SectorErase</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, flash.o(i.Flash_SectorErase))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>

<P><STRONG><a name="[b4]"></a>Flash_WriteByte</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, flash.o(i.Flash_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>

<P><STRONG><a name="[b8]"></a>Gpio_ClearIrq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpio.o(i.Gpio_ClearIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_ClearIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_intterupt_config
</UL>

<P><STRONG><a name="[6b]"></a>Gpio_EnableIrq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(i.Gpio_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpio_EnableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_intterupt_config
</UL>

<P><STRONG><a name="[a1]"></a>Gpio_GetIO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.Gpio_GetIO))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Tx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Rx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadFIFO
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
</UL>

<P><STRONG><a name="[6d]"></a>Gpio_InitIOExt</STRONG> (Thumb, 350 bytes, Stack size 20 bytes, gpio.o(i.Gpio_InitIOExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAnalog
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3WriteFIFO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3WriteByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadFIFO
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_intterupt_config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[6e]"></a>Gpio_SetAnalog</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gpio.o(i.Gpio_SetAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_SetAnalog
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
</UL>

<P><STRONG><a name="[9f]"></a>Gpio_SetIO</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, gpio.o(i.Gpio_SetIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3WriteFIFO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3WriteByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadFIFO
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32f005.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>InhibitonStatus</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, command.o(i.InhibitonStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InhibitonStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_params_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_key_anlyz
</UL>

<P><STRONG><a name="[64]"></a>KEY_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = KEY_Init &rArr; key_intterupt_config &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_intterupt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
</UL>

<P><STRONG><a name="[8a]"></a>KeyStaus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, key.o(i.KeyStaus))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_key_anlyz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkMode
</UL>

<P><STRONG><a name="[2d]"></a>RxIntCallback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_uart.o(i.RxIntCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RxIntCallback &rArr; Uart_GetStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(i.UART_Config)
</UL>
<P><STRONG><a name="[73]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_hc32f005.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, system_hc32f005.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f005.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>UART1_SendBytes</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_uart.o(i.UART1_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART1_SendBytes &rArr; Uart_SendData &rArr; Uart_GetStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ack_response
</UL>

<P><STRONG><a name="[76]"></a>UART_Config</STRONG> (Thumb, 342 bytes, Stack size 88 bytes, bsp_uart.o(i.UART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Config &rArr; Uart_Init &rArr; Uart_SetMultiMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Run
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Cnt16Set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ARRSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPeripheralGate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_GetPClkFreq
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetBaudRate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ack_response
</UL>

<P><STRONG><a name="[67]"></a>Uart_ClrStatus</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart.o(i.Uart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_ClrStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxIntCallback
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrIntCallback
</UL>

<P><STRONG><a name="[80]"></a>Uart_EnableFunc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_EnableFunc &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[7f]"></a>Uart_EnableIrq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_EnableIrq &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[71]"></a>Uart_GetStatus</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, uart.o(i.Uart_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart_GetStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxIntCallback
</UL>

<P><STRONG><a name="[7e]"></a>Uart_Init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart_Init &rArr; Uart_SetMultiMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMultiMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMode
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInitNvic
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInitNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[72]"></a>Uart_ReceiveData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart.o(i.Uart_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_ReceiveData &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxIntCallback
</UL>

<P><STRONG><a name="[75]"></a>Uart_SendData</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart.o(i.Uart_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart_SendData &rArr; Uart_GetStatus &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendBytes
</UL>

<P><STRONG><a name="[79]"></a>Uart_SetBaudRate</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, uart.o(i.Uart_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart_SetBaudRate &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[86]"></a>Uart_SetMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart.o(i.Uart_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_SetMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[87]"></a>Uart_SetMultiMode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart.o(i.Uart_SetMultiMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_SetMultiMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[89]"></a>WorkMode</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, command.o(i.WorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WorkMode &rArr; KEY_Init &rArr; key_intterupt_config &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStaus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[6c]"></a>_GpioEnableIrq</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, gpio.o(i._GpioEnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
</UL>

<P><STRONG><a name="[5c]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetFunc
</UL>

<P><STRONG><a name="[40]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddl.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[52]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddl.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[8b]"></a>anlyz_uart_data</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uartparse.o(i.anlyz_uart_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = anlyz_uart_data &rArr; eeprom_write &rArr; ee_WriteBytes &rArr; i2c_SendByte &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrase
</UL>

<P><STRONG><a name="[8d]"></a>bGetMessage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmt2300drive.o(i.bGetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bGetMessage &rArr; vSpi3BurstReadFIFO &rArr; bSpi3ReadFIFO &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3BurstReadFIFO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadFIFO
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableRdFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Rx
</UL>

<P><STRONG><a name="[91]"></a>bGoRx</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cmt2300drive.o(i.bGoRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bGoRx &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Rx
</UL>

<P><STRONG><a name="[57]"></a>bGoSleep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cmt2300drive.o(i.bGoSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bGoSleep &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300_Init
</UL>

<P><STRONG><a name="[95]"></a>bGoStandby</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cmt2300drive.o(i.bGoStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Rx
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetTxPayloadLength
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoTx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoRx
</UL>

<P><STRONG><a name="[97]"></a>bGoTx</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cmt2300drive.o(i.bGoTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bGoTx &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSendMessage
</UL>

<P><STRONG><a name="[98]"></a>bIntSrcFlagClr</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, cmt2300drive.o(i.bIntSrcFlagClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bIntSrcFlagClr &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Tx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Rx
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSendMessage
</UL>

<P><STRONG><a name="[99]"></a>bSendMessage</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cmt2300drive.o(i.bSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bSendMessage &rArr; vSetTxPayloadLength &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3BurstWriteFIFO
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetTxPayloadLength
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableWrFifo
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bIntSrcFlagClr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoTx
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Tx
</UL>

<P><STRONG><a name="[94]"></a>bSpi3Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_spi.o(i.bSpi3Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bSpi3Read &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3WriteByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetTxPayloadLength
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIntSrcCfg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableWrFifo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableRdFifo
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnablePLLcheck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableAntSwitch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearFIFO
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bIntSrcFlagClr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoTx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoSleep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoRx
</UL>

<P><STRONG><a name="[9e]"></a>bSpi3ReadByte</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, bsp_spi.o(i.bSpi3ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bSpi3ReadByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIO
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>

<P><STRONG><a name="[90]"></a>bSpi3ReadFIFO</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, bsp_spi.o(i.bSpi3ReadFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bSpi3ReadFIFO &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIO
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3BurstReadFIFO
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGetMessage
</UL>

<P><STRONG><a name="[a2]"></a>command_key_anlyz</STRONG> (Thumb, 1158 bytes, Stack size 16 bytes, command.o(i.command_key_anlyz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = command_key_anlyz &rArr; CommandTx &rArr; loop_Tx &rArr; bSendMessage &rArr; vSetTxPayloadLength &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InhibitonStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_params_get
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStaus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[a3]"></a>command_process</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, command.o(i.command_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = command_process &rArr; command_key_anlyz &rArr; CommandTx &rArr; loop_Tx &rArr; bSendMessage &rArr; vSetTxPayloadLength &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Rx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfPrase
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_key_anlyz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_CheckOk
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrase
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_params_get
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStaus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[93]"></a>delay100us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ddl.o(i.delay100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay100us
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoftReset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoTx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoRx
</UL>

<P><STRONG><a name="[96]"></a>delay1ms</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ddl.o(i.delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Tx
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoSleep
</UL>

<P><STRONG><a name="[a0]"></a>delay1us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ddl.o(i.delay1us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3WriteFIFO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3WriteByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadFIFO
</UL>

<P><STRONG><a name="[a4]"></a>ee_CheckOk</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at24c02.o(i.ee_CheckOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ee_CheckOk &rArr; i2c_CheckDevice &rArr; i2c_CfgGpio &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[a6]"></a>ee_ReadBytes</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, at24c02.o(i.ee_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ee_ReadBytes &rArr; i2c_SendByte &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>

<P><STRONG><a name="[a7]"></a>ee_WriteBytes</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, at24c02.o(i.ee_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ee_WriteBytes &rArr; i2c_SendByte &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>

<P><STRONG><a name="[8c]"></a>eeprom_write</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, eeprom.o(i.eeprom_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = eeprom_write &rArr; ee_WriteBytes &rArr; i2c_SendByte &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anlyz_uart_data
</UL>

<P><STRONG><a name="[b0]"></a>i2c_Ack</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(i.i2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_Ack &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[aa]"></a>i2c_CheckDevice</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_CheckDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2c_CheckDevice &rArr; i2c_CfgGpio &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_CheckOk
</UL>

<P><STRONG><a name="[b1]"></a>i2c_NAck</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(i.i2c_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_NAck &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[af]"></a>i2c_ReadByte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_ReadByte &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIO
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[ad]"></a>i2c_SendByte</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_SendByte &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[ac]"></a>i2c_Start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(i.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_Start &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[ab]"></a>i2c_Stop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(i.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_Stop &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CfgGpio
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_CheckOk
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[ae]"></a>i2c_WaitAck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(i.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_WaitAck &rArr; Gpio_SetIO
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIO
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[b7]"></a>key_intterupt_LevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, key.o(i.key_intterupt_LevelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_intterupt_config
</UL>

<P><STRONG><a name="[70]"></a>key_intterupt_config</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, key.o(i.key_intterupt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = key_intterupt_config &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetFunc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_params_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_intterupt_LevelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[a8]"></a>loop_Rx</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.loop_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = loop_Rx &rArr; bGoRx &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIO
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearFIFO
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bIntSrcFlagClr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoRx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGetMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[62]"></a>loop_Tx</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(i.loop_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = loop_Tx &rArr; bSendMessage &rArr; vSetTxPayloadLength &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIO
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearFIFO
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSendMessage
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bIntSrcFlagClr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
</UL>

<P><STRONG><a name="[3b]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main &rArr; command_process &rArr; command_key_anlyz &rArr; CommandTx &rArr; loop_Tx &rArr; bSendMessage &rArr; vSetTxPayloadLength &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a9]"></a>rfPrase</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, command.o(i.rfPrase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rfPrase &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Get8
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_params_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[63]"></a>setup_Rx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.setup_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setup_Rx &rArr; bGoRx &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIntSrcEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIntSrcCfg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGpioFuncCfg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableAntSwitch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearFIFO
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoSleep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoRx
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
</UL>

<P><STRONG><a name="[61]"></a>setup_Tx</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.setup_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setup_Tx &rArr; vIntSrcCfg &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIntSrcEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIntSrcCfg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGpioFuncCfg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableAntSwitch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearFIFO
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
</UL>

<P><STRONG><a name="[5f]"></a>system_params_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uartparse.o(i.system_params_get))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfPrase
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_key_anlyz
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InhibitonStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ack_response
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_intterupt_config
</UL>

<P><STRONG><a name="[a5]"></a>uartPrase</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, uartparse.o(i.uartPrase))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uartPrase &rArr; uart_ack_response &rArr; UART_Config &rArr; Uart_Init &rArr; Uart_SetMultiMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Get8
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ack_response
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anlyz_uart_data
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[be]"></a>uart_ack_response</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, command.o(i.uart_ack_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = uart_ack_response &rArr; UART_Config &rArr; Uart_Init &rArr; Uart_SetMultiMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Get8
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_params_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrase
</UL>

<P><STRONG><a name="[55]"></a>vCfgBank</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cmt2300drive.o(i.vCfgBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vCfgBank &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300_Init
</UL>

<P><STRONG><a name="[b9]"></a>vClearFIFO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmt2300drive.o(i.vClearFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vClearFIFO &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Tx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_Rx
</UL>

<P><STRONG><a name="[ba]"></a>vEnableAntSwitch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cmt2300drive.o(i.vEnableAntSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vEnableAntSwitch &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
</UL>

<P><STRONG><a name="[56]"></a>vEnablePLLcheck</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmt2300drive.o(i.vEnablePLLcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vEnablePLLcheck &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300_Init
</UL>

<P><STRONG><a name="[8e]"></a>vEnableRdFifo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmt2300drive.o(i.vEnableRdFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vEnableRdFifo &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGetMessage
</UL>

<P><STRONG><a name="[9b]"></a>vEnableWrFifo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmt2300drive.o(i.vEnableWrFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vEnableWrFifo &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSendMessage
</UL>

<P><STRONG><a name="[bb]"></a>vGpioFuncCfg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmt2300drive.o(i.vGpioFuncCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vGpioFuncCfg &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
</UL>

<P><STRONG><a name="[54]"></a>vInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cmt2300drive.o(i.vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vInit &rArr; bIntSrcFlagClr &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoftReset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bIntSrcFlagClr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300_Init
</UL>

<P><STRONG><a name="[bc]"></a>vIntSrcCfg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cmt2300drive.o(i.vIntSrcCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vIntSrcCfg &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
</UL>

<P><STRONG><a name="[bd]"></a>vIntSrcEnable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmt2300drive.o(i.vIntSrcEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vIntSrcEnable &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Rx
</UL>

<P><STRONG><a name="[9a]"></a>vSetTxPayloadLength</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmt2300drive.o(i.vSetTxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vSetTxPayloadLength &rArr; bGoStandby &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSendMessage
</UL>

<P><STRONG><a name="[c0]"></a>vSoftReset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmt2300drive.o(i.vSoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vSoftReset &rArr; vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInit
</UL>

<P><STRONG><a name="[8f]"></a>vSpi3BurstReadFIFO</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_spi.o(i.vSpi3BurstReadFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vSpi3BurstReadFIFO &rArr; bSpi3ReadFIFO &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGetMessage
</UL>

<P><STRONG><a name="[9c]"></a>vSpi3BurstWriteFIFO</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_spi.o(i.vSpi3BurstWriteFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vSpi3BurstWriteFIFO &rArr; vSpi3WriteFIFO &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSendMessage
</UL>

<P><STRONG><a name="[bf]"></a>vSpi3Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bsp_spi.o(i.vSpi3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vSpi3Init &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInit
</UL>

<P><STRONG><a name="[92]"></a>vSpi3Write</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_spi.o(i.vSpi3Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vSpi3Write &rArr; vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoftReset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetTxPayloadLength
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIntSrcEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIntSrcCfg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGpioFuncCfg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableWrFifo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableRdFifo
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnablePLLcheck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnableAntSwitch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearFIFO
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCfgBank
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bIntSrcFlagClr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoTx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoStandby
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoSleep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bGoRx
</UL>

<P><STRONG><a name="[9d]"></a>vSpi3WriteByte</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, bsp_spi.o(i.vSpi3WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vSpi3WriteByte &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSpi3Read
</UL>

<P><STRONG><a name="[c1]"></a>vSpi3WriteFIFO</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, bsp_spi.o(i.vSpi3WriteFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vSpi3WriteFIFO &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpi3BurstWriteFIFO
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>ClkUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.ClkUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetFunc
</UL>

<P><STRONG><a name="[5d]"></a>ClkWriteDummy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(i.ClkWriteDummy))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetFunc
</UL>

<P><STRONG><a name="[66]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupts_hc32f005.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>

<P><STRONG><a name="[81]"></a>UartDeInitNvic</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart.o(i.UartDeInitNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartDeInitNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[85]"></a>UartGetInternDataPtr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart.o(i.UartGetInternDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMultiMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetBaudRate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>

<P><STRONG><a name="[84]"></a>UartInitNvic</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(i.UartInitNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartInitNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[82]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInitNvic
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInitNvic
</UL>

<P><STRONG><a name="[83]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInitNvic
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInitNvic
</UL>

<P><STRONG><a name="[b6]"></a>i2c_CfgGpio</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_CfgGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_CfgGpio &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[b5]"></a>i2c_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(i.i2c_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
